{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Digital Landscape Documentation","text":"<p>Welcome to the Digital Landscape documentation. This tool provides comprehensive insights into technology usage across your organisation, featuring:</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#tech-radar","title":"Tech Radar","text":"<p>Interactive visualisation of technology adoption status and trends across the organisation. The radar provides insights into:</p> <ul> <li>Technology adoption rings (Adopt, Trial, Assess, Hold)</li> <li>Categorised quadrant view of technologies (Languages, Frameworks, Supporting Tools, Infrastructure)</li> <li>Historical timeline for movement of technologies between rings</li> <li>Detailed information about each technology and linked projects</li> </ul>"},{"location":"#statistics","title":"Statistics","text":"<p>Detailed analytics of repository statistics and language usage, including:</p> <ul> <li>Repository counts and status</li> <li>Language distribution</li> <li>Technology adoption trends</li> <li>Data-based, repository status and project filters</li> <li>Alphabetical, repository count, usage and size ascending/descending sorting filters</li> <li>Average/total size toggle and Tech Radar ring toggle</li> </ul>"},{"location":"#projects","title":"Projects","text":"<p>Comprehensive project management interface offering:</p> <ul> <li>Overview of all projects from Tech Audit Tool</li> <li>Technology stack details</li> <li>Repository information and statistics from GitHub scraping</li> </ul>"},{"location":"#review","title":"Review","text":"<p>Administrative interface for managing the Tech Radar:</p> <ul> <li>Technology status updates</li> <li>New technology additions from Tech Audit Tool</li> <li>Technology management (change ring, name, quadrant)</li> <li>Add new technology</li> </ul>"},{"location":"#terraform","title":"Terraform","text":"<p>The terraform code is undocumented within this documentation as it reflects similar infrastructure to applications deployed within the team. It uses a Cognito module, AWS Fargate, AWS ECR and AWS S3. There are no external APIs or services used.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Tech Radar Documentation</li> <li>Statistics Documentation</li> <li>Projects Documentation</li> <li>Review Documentation</li> </ul>"},{"location":"components/infoBox/","title":"InfoBox Component Documentation","text":"<p>The InfoBox component provides a draggable, resizable information panel that displays detailed information about selected items in the Tech Radar and on the Review page.</p>"},{"location":"components/infoBox/#props","title":"Props","text":"<p>The InfoBox component accepts the following props:</p> Prop Type Default Description <code>isAdmin</code> boolean <code>false</code> Whether the current user has administrative privileges <code>selectedItem</code> object <code>undefined</code> The technology item to display details for <code>initialPosition</code> object <code>{ x: 24, y: 80 }</code> Starting coordinates for the InfoBox <code>onClose</code> function Required Handler function called when the InfoBox is closed <code>timelineAscending</code> boolean Required Whether to display timeline in ascending order <code>setTimelineAscending</code> function Required Function to toggle timeline sort order <code>selectedTimelineItem</code> object <code>undefined</code> Currently selected timeline entry <code>setSelectedTimelineItem</code> function Required Function to update selected timeline entry <code>projectsForTech</code> array <code>undefined</code> List of projects using this technology <code>handleProjectClick</code> function Required Handler for project selection <code>onEditConfirm</code> function <code>undefined</code> Handler for confirming edits (admin only) <code>onEditCancel</code> function <code>undefined</code> Handler for cancelling edits (admin only)"},{"location":"components/infoBox/#usage","title":"Usage","text":"<pre><code>import InfoBox from '../components/InfoBox/InfoBox';\n\nfunction TechRadarView() {\n  const [selectedTech, setSelectedTech] = useState(null);\n  const [timelineAscending, setTimelineAscending] = useState(true);\n  const [selectedTimelineItem, setSelectedTimelineItem] = useState(null);\n\n  return (\n    &lt;div className=\"radar-container\"&gt;\n      {/* Radar visualisation */}\n\n      {selectedTech &amp;&amp; (\n        &lt;InfoBox\n          selectedItem={selectedTech}\n          onClose={() =&gt; setSelectedTech(null)}\n          timelineAscending={timelineAscending}\n          setTimelineAscending={setTimelineAscending}\n          selectedTimelineItem={selectedTimelineItem}\n          setSelectedTimelineItem={setSelectedTimelineItem}\n          projectsForTech={projectsData}\n          handleProjectClick={handleProjectSelection}\n        /&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/infoBox/#functionalities","title":"Functionalities","text":"<p>The InfoBox implements a custom drag-and-drop system that:</p> <ul> <li>Allows users to reposition the box by dragging the icon that is to the left of the technology name</li> <li>Maintains the box position during user interaction</li> <li>Provides visual feedback during dragging shadow effects</li> </ul> <p>The timeline section displays the history of a technology's movement through different rings:</p> <ul> <li>Chronological representation of status changes</li> <li>Visual indicators for upward/downward/lateral movements</li> <li>Toggleable sort order (oldest-first or newest-first)</li> <li>Interactive selection to view detailed descriptions of each change</li> </ul> <p>For users with reviewer privileges, the InfoBox provides:</p> <ul> <li>Inline editing of technology title and category</li> <li>Form controls for modifying technology details</li> <li>Confirmation and cancellation options for edits</li> <li>Visual indicators of edit mode</li> </ul> <p>When no item is selected, the InfoBox displays a placeholder message instructing users how to interact with the radar visualisation.</p>"},{"location":"components/multiSelect/","title":"MultiSelect","text":"<p>The MultiSelect component provides an interactive dropdown interface for selecting multiple options from a list.</p>"},{"location":"components/multiSelect/#features","title":"Features","text":"<ul> <li>Allows users to select multiple items from a dropdown list</li> <li>Includes real-time filtering of options as users type</li> <li>Clearly indicates selected items with tags</li> <li>Supports keyboard navigation and interaction</li> <li>Configurable placeholder text when no items are selected</li> <li>Support for disabling the component when needed</li> <li>Automatically closes the dropdown when clicking elsewhere</li> </ul>"},{"location":"components/multiSelect/#props","title":"Props","text":"<p>The MultiSelect component accepts the following props:</p> Prop Type Default Description <code>options</code> array Required Array of option objects with <code>value</code> and <code>label</code> properties <code>value</code> array Required Array of currently selected option objects <code>onChange</code> function Required Handler function called when selections change <code>placeholder</code> string <code>\"Select...\"</code> Text displayed when no options are selected <code>isDisabled</code> boolean <code>false</code> Whether the component is disabled"},{"location":"components/multiSelect/#usage","title":"Usage","text":"<pre><code>import MultiSelect from '../components/MultiSelect/MultiSelect';\n\nfunction FilterForm() {\n  const [selectedTechnologies, setSelectedTechnologies] = useState([]);\n\n  const technologyOptions = [\n    { value: 'react', label: 'React' },\n    { value: 'angular', label: 'Angular' },\n    { value: 'vue', label: 'Vue.js' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'nextjs', label: 'Next.js' },\n  ];\n\n  return (\n    &lt;div className=\"filter-form\"&gt;\n      &lt;label&gt;Technologies:&lt;/label&gt;\n      &lt;MultiSelect\n        options={technologyOptions}\n        value={selectedTechnologies}\n        onChange={setSelectedTechnologies}\n        placeholder=\"Select technologies...\"\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/multiSelect/#interaction-patterns","title":"Interaction Patterns","text":"<p>The MultiSelect component implements several interaction patterns:</p> <ul> <li>Click to Open: Clicking the control area opens the dropdown</li> <li>Search Filtering: Typing in the input filters the available options</li> <li>Click to Select: Clicking an option adds it to the selection</li> <li>Click to Remove: Clicking the close icon on a selected item removes it</li> <li>Click Outside to Close: Clicking outside the component closes the dropdown</li> </ul>"},{"location":"components/multiSelect/#selected-items-display","title":"Selected Items Display","text":"<p>Selected items are displayed as interactive tags within the control area:</p> <ul> <li>Each tag shows the option's label text</li> <li>Tags include a remove button (\u00d7) for quick removal</li> <li>Tags are visually distinct from the input area</li> <li>Multiple tags flow naturally within the available space</li> </ul>"},{"location":"components/multiSelect/#search-functionality","title":"Search Functionality","text":"<p>The component includes built-in search capabilities:</p> <ul> <li>Real-time filtering as the user types</li> <li>Case-insensitive matching against option labels</li> <li>Empty results handling (dropdown hides when no matches)</li> <li>Search term is cleared when a selection is made</li> </ul>"},{"location":"components/multiSelect/#styling","title":"Styling","text":"<p>The MultiSelect uses dedicated CSS defined in <code>../../styles/components/MultiSelect.css</code> with:</p>"},{"location":"components/skeletons/","title":"Skeleton Loading","text":"<p>Skeleton loading components provide visual placeholders that mimic the structure of content while it is being loaded. They improve the perceived performance of the application by reducing the jarring effect of empty spaces and sudden content appearance, creating a smoother, more engaging user experience.</p> <p>What is skeleton loading? (External Link)</p>"},{"location":"components/skeletons/#components","title":"Components","text":"<p>The Digital Landscape application includes several skeleton loading components designed to match the structure of their corresponding content components:</p>"},{"location":"components/skeletons/#skeletonstatcard","title":"SkeletonStatCard","text":"<p>The <code>SkeletonStatCard</code> component renders a placeholder for statistical cards that display metrics and values.</p>"},{"location":"components/skeletons/#props","title":"Props","text":"Prop Type Default Description <code>minWidth</code> string <code>\"0\"</code> Minimum width of the skeleton card"},{"location":"components/skeletons/#usage","title":"Usage","text":"<pre><code>import SkeletonStatCard from '../components/Statistics/Skeletons/SkeletonStatCard';\n\nfunction StatisticsPanel() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [stats, setStats] = useState(null);\n\n  // Fetch data and update loading state\n\n  return (\n    &lt;div className=\"statistics-panel\"&gt;\n      {isLoading ? (\n        &lt;&gt;\n          &lt;SkeletonStatCard minWidth=\"200px\" /&gt;\n          &lt;SkeletonStatCard minWidth=\"200px\" /&gt;\n          &lt;SkeletonStatCard minWidth=\"200px\" /&gt;\n        &lt;/&gt;\n      ) : (\n        // Render actual stat cards with data\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/skeletons/#skeletonlanguagecard","title":"SkeletonLanguageCard","text":"<p>The <code>SkeletonLanguageCard</code> component renders a placeholder for language cards that display programming language statistics.</p>"},{"location":"components/skeletons/#usage_1","title":"Usage","text":"<pre><code>import SkeletonLanguageCard from '../components/Statistics/Skeletons/SkeletonLanguageCard';\n\nfunction LanguagePanel() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [languages, setLanguages] = useState([]);\n\n  // Fetch data and update loading state\n\n  return (\n    &lt;div className=\"language-panel\"&gt;\n      {isLoading ? (\n        &lt;&gt;\n          &lt;SkeletonLanguageCard /&gt;\n          &lt;SkeletonLanguageCard /&gt;\n          &lt;SkeletonLanguageCard /&gt;\n        &lt;/&gt;\n      ) : (\n        // Render actual language cards with data\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/skeletons/#animation","title":"Animation","text":"<p>All skeleton components feature a subtle pulsing animation.</p> <p>The animation is implemented using CSS keyframes that gradually fade the opacity in and out, creating a gentle pulsing effect.</p>"},{"location":"components/skeletons/#styling","title":"Styling","text":"<p>The skeleton components use dedicated CSS defined in <code>../../styles/components/SkeletonLoading.css</code> with:</p>"},{"location":"components/skeletons/#css-structure","title":"CSS Structure","text":"<p>The skeleton styling includes:</p> <ul> <li>Base <code>.skeleton</code> class with the pulsing animation</li> <li>Element-specific classes (e.g., <code>.skeleton-title</code>, <code>.skeleton-value</code>)</li> <li>Varied widths for different elements to create a natural appearance</li> <li>Responsive dimensions that adapt to different screen sizes</li> </ul>"},{"location":"components/skeletons/#implementation-details","title":"Implementation Details","text":"<p>Skeleton components are designed to be:</p> <ol> <li>Lightweight components with minimal logic</li> <li>Using CSS variables to match the application's theme</li> <li>Not interfering with screen readers or keyboard navigation</li> <li>Using CSS animations rather than JavaScript for smooth performance</li> </ol>"},{"location":"components/skeletons/#integration-with-components","title":"Integration with Components","text":"<p>Skeleton components are typically used in conditional rendering patterns:</p> <pre><code>{isLoading ? &lt;SkeletonComponent /&gt; : &lt;ActualComponent data={data} /&gt;}\n</code></pre>"},{"location":"components/statistics/","title":"Statistics","text":"<p>The Statistics component provides a visualisation of repository and programming language data across the organisation. It enables users to analyse technology usage patterns, filter data by various criteria, and interact with language statistics.</p>"},{"location":"components/statistics/#features","title":"Features","text":"<ul> <li>Displays detailed metrics for each programming language</li> <li>Filter statistics by various time periods including custom date ranges</li> <li>Toggle between active, archived, or all repositories</li> <li>Sort languages by name, repository count, or code size</li> <li>Highlight languages that appear in the Tech Radar</li> <li>Filter statistics by specific projects</li> <li>Search functionality to quickly find specific languages</li> <li>Visual indicators to match Tech Radar rings</li> </ul>"},{"location":"components/statistics/#props","title":"Props","text":"<p>The Statistics component accepts the following props:</p> Prop Type Default Description <code>data</code> object Required Object containing repository and language statistics <code>onTechClick</code> function Required Handler function called when a technology is clicked <code>onDateChange</code> function Required Handler function called when the date filter changes <code>isLoading</code> boolean Required Whether the statistics data is currently loading <code>projectsData</code> array Required Array of project objects for project filtering <code>onProjectsChange</code> function Required Handler function called when selected projects change <code>searchTerm</code> string <code>\"\"</code> Current search term for filtering languages"},{"location":"components/statistics/#usage","title":"Usage","text":"<pre><code>import Statistics from '../components/Statistics/Statistics';\n\nfunction StatisticsPage() {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [projectsData, setProjectsData] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleTechClick = (techName) =&gt; {\n    // Navigate to tech radar or show tech details\n  };\n\n  const handleDateChange = (date, repoView) =&gt; {\n    // Fetch data for the selected date range and repository view\n    fetchStatistics(date, repoView).then(data =&gt; {\n      setData(data);\n      setIsLoading(false);\n    });\n  };\n\n  const handleProjectsChange = (selectedProjects) =&gt; {\n    // Filter statistics by selected projects\n    fetchProjectStatistics(selectedProjects).then(data =&gt; {\n      setData(data);\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    &lt;div className=\"statistics-page\"&gt;\n      &lt;Statistics\n        data={data}\n        onTechClick={handleTechClick}\n        onDateChange={handleDateChange}\n        isLoading={isLoading}\n        projectsData={projectsData}\n        onProjectsChange={handleProjectsChange}\n        searchTerm={searchTerm}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/statistics/#date-filtering","title":"Date Filtering","text":"<p>The Statistics component provides several date filtering options:</p> <ul> <li>All Time: Shows statistics across the entire history</li> <li>Last Month: Filters to the past 30 days</li> <li>Last 3 Months: Filters to the past 90 days</li> <li>Last 6 Months: Filters to the past 180 days</li> <li>Last Year: Filters to the past 365 days</li> <li>Custom Date: Allows selection of a specific date to filter from</li> </ul> <p>When a date filter is applied, all statistics are recalculated to include only repositories with activity after the selected date.</p>"},{"location":"components/statistics/#repository-views","title":"Repository Views","text":"<p>The component offers three different repository view modes:</p> <ul> <li>Active Repositories: Shows only non-archived repositories (default)</li> <li>Archived Repositories: Shows only archived repositories</li> <li>All Repositories: Shows both active and archived repositories</li> </ul> <p>Each view provides different insights into the organisation's technology usage patterns.</p>"},{"location":"components/statistics/#language-statistics","title":"Language Statistics","text":"<p>For each programming language, the component displays:</p> <ul> <li>Repository Count: Number of repositories using the language</li> <li>Lines of Code: Total lines of code written in the language</li> <li>Average Size: Average size of the language usage per repository</li> <li>Tech Radar Status: Visual indicator of the language's status in the Tech Radar</li> </ul> <p>Languages can be sorted by any of these metrics in ascending or descending order.</p>"},{"location":"components/statistics/#tech-radar-integration","title":"Tech Radar Integration","text":"<p>Languages that appear in the Tech Radar are highlighted with their corresponding ring colour:</p> <ul> <li>Adopt: Technologies recommended for adoption</li> <li>Trial: Technologies in trial phase</li> <li>Assess: Technologies being assessed</li> <li>Hold: Technologies not recommended for new projects</li> </ul> <p>Clicking on a language with Tech Radar status navigates to its entry in the Tech Radar visualisation.</p>"},{"location":"components/statistics/#project-filtering","title":"Project Filtering","text":"<p>The component includes a multi-select dropdown that allows filtering statistics by specific projects:</p> <ul> <li>Select one or more projects to see statistics for only those projects</li> <li>Clear the selection to view statistics across all projects</li> <li>Project options are automatically generated from the provided project data</li> </ul>"},{"location":"components/statistics/#styling","title":"Styling","text":"<p>The Statistics component uses dedicated CSS defined in <code>../../styles/components/Statistics.css</code> with:</p>"},{"location":"components/statistics/#loading-states","title":"Loading States","text":"<p>During data fetching, the component displays skeleton loading states:</p> <ul> <li>Skeleton cards for summary statistics</li> <li>Skeleton language cards for the language list</li> <li>Smooth transition from loading to data display</li> </ul>"},{"location":"components/themeToggle/","title":"ThemeToggle","text":"<p>The ThemeToggle component provides a simple button that allows users to switch between light and dark themes throughout the application. It integrates with the ThemeContext to maintain consistent theme state across all components and is used in the Header component.</p>"},{"location":"components/themeToggle/#features","title":"Features","text":"<ul> <li>Clear visual indication of the current theme with appropriate icons</li> <li>Includes proper ARIA labels for screen readers</li> <li>Works directly with the application's theme context</li> <li>Minimal footprint suitable for header placement</li> <li>Icon changes to reflect the current theme state</li> </ul>"},{"location":"components/themeToggle/#usage","title":"Usage","text":"<pre><code>import ThemeToggle from '../components/ThemeToggle/ThemeToggle';\n\nfunction Header() {\n  return (\n    &lt;header className=\"app-header\"&gt;\n      &lt;div className=\"logo\"&gt;Digital Landscape&lt;/div&gt;\n      &lt;nav&gt;{/* Navigation items */}&lt;/nav&gt;\n      &lt;ThemeToggle /&gt;\n    &lt;/header&gt;\n  );\n}\n</code></pre>"},{"location":"components/themeToggle/#implementation-details","title":"Implementation Details","text":"<p>The ThemeToggle component:</p> <ol> <li>Uses the <code>useTheme</code> hook from ThemeContext to access the current theme state and toggle function</li> <li>Renders a button with an icon that changes based on the current theme (sun for light mode, moon for dark mode)</li> <li>Includes appropriate ARIA labels that update based on the current theme</li> <li>Calls the <code>toggleTheme</code> function from the context when clicked</li> </ol>"},{"location":"components/themeToggle/#code-example","title":"Code Example","text":"<pre><code>function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    &lt;button\n      onClick={toggleTheme}\n      className=\"theme-toggle\"\n      aria-label={`Switch to ${theme === \"light\" ? \"dark\" : \"light\"} mode`}\n    &gt;\n      {theme === \"light\" ? &lt;SunIcon /&gt; : &lt;MoonIcon /&gt;}\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"components/themeToggle/#styling","title":"Styling","text":"<p>The ThemeToggle component uses dedicated CSS defined in <code>../../styles/components/ThemeToggle.css</code> with:</p>"},{"location":"components/themeToggle/#integration-with-themecontext","title":"Integration with ThemeContext","text":"<p>The ThemeToggle component relies on the ThemeContext to:</p> <ul> <li>Access the current theme state (<code>light</code> or <code>dark</code>)</li> <li>Trigger theme changes via the <code>toggleTheme</code> function</li> <li>Ensure theme changes persist across the application</li> </ul>"},{"location":"components/header/","title":"Header Component Documentation","text":"<p>The Header component serves as the primary navigation interface for the Digital Landscape application. It provides users with essential navigation controls, search functionality, and application settings in a consistent, accessible manner across all pages.</p>"},{"location":"components/header/#props","title":"Props","text":"<p>The Header component accepts the following props:</p> Prop Type Default Description <code>searchTerm</code> string <code>\"\"</code> The current search term displayed in the search input <code>onSearchChange</code> function <code>() =&gt; {}</code> Handler function called when the search term changes <code>searchResults</code> array <code>[]</code> Array of search results to display in the dropdown <code>onSearchResultClick</code> function <code>() =&gt; {}</code> Handler function called when a search result is clicked <code>onOpenProjects</code> function <code>() =&gt; {}</code> Handler function called when the projects button is clicked <code>onStatsTechClick</code> function <code>() =&gt; {}</code> Handler function called when a technology is clicked in statistics <code>hideSearch</code> boolean <code>false</code> Whether to hide the search functionality"},{"location":"components/header/#usage","title":"Usage","text":"<pre><code>import Header from '../components/Header/Header';\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleSearchChange = (term) =&gt; {\n    setSearchTerm(term);\n    // Perform search and update results\n  };\n\n  const handleSearchResultClick = (result) =&gt; {\n    // Handle result selection\n  };\n\n  return (\n    &lt;div className=\"app\"&gt;\n      &lt;Header \n        searchTerm={searchTerm}\n        onSearchChange={handleSearchChange}\n        searchResults={searchResults}\n        onSearchResultClick={handleSearchResultClick}\n      /&gt;\n      {/* Rest of application */}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/header/#search-functionality","title":"Search Functionality","text":"<p>The Header component provides a context-aware search system that:</p> <ul> <li>Adapts placeholder text based on the current route</li> <li>Supports keyboard shortcuts (\u2318+K on macOS, CTRL+K on Windows/Linux)</li> <li>Displays relevant search results in a dropdown</li> <li>Allows for clearing the search with a single click</li> </ul>"},{"location":"components/header/#navigation","title":"Navigation","text":"<p>The Header provides navigation to the main sections of the application:</p> <ul> <li>Tech Radar</li> <li>Statistics</li> <li>Projects</li> <li>Review</li> </ul> <p>The Header also provides a help system that displays the help modal when the help button is clicked.</p>"},{"location":"components/header/#mobile-responsiveness","title":"Mobile Responsiveness","text":"<p>On smaller screens, the Header transforms its navigation into a dropdown menu accessed through the <code>MenuDropdown</code> component, ensuring usability across all device sizes.</p>"},{"location":"components/header/#styling","title":"Styling","text":"<p>The Header component uses dedicated CSS defined in <code>../../styles/components/Header.css</code> and leverages the application's theme system for consistent visual presentation.</p>"},{"location":"components/header/#integration-with-theme","title":"Integration with Theme","text":"<p>The Header integrates with the application's theme system through the ThemeToggle component, allowing users to switch between light and dark modes.</p>"},{"location":"components/header/helpModal/","title":"HelpModal Component Documentation","text":"<p>The HelpModal component provides contextual help and guidance for user when viewing each page on the application.</p>"},{"location":"components/header/helpModal/#props","title":"Props","text":"<p>The HelpModal component accepts the following props:</p> Prop Type Default Description <code>show</code> boolean Required Controls the visibility of the modal <code>onClose</code> function Required Handler function called when the modal is closed"},{"location":"components/header/helpModal/#usage","title":"Usage","text":"<pre><code>import HelpModal from '../components/Header/HelpModal';\n\nfunction App() {\n  const [showHelp, setShowHelp] = useState(false);\n\n  return (\n    &lt;div className=\"app\"&gt;\n      &lt;button onClick={() =&gt; setShowHelp(true)}&gt;\n        Show Help\n      &lt;/button&gt;\n\n      &lt;HelpModal \n        show={showHelp}\n        onClose={() =&gt; setShowHelp(false)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/header/helpModal/#context-specific-content","title":"Context-Specific Content","text":"<p>The HelpModal dynamically renders different content based on the current route</p>"},{"location":"components/header/helpModal/#animation-implementation","title":"Animation Implementation","text":"<p>The HelpModal uses a two-phase rendering approach for smooth animations:</p> <ol> <li>Mount Phase: Component is added to the DOM but remains invisible</li> <li>Visibility Phase: CSS transitions are applied to fade in the modal</li> <li>Unmount Delay: When closing, animations complete before removal from DOM</li> </ol>"},{"location":"components/header/helpModal/#styling","title":"Styling","text":"<p>The HelpModal uses dedicated CSS defined in <code>../../styles/components/HelpModal.css</code>.</p>"},{"location":"components/projects/","title":"Projects Component Documentation","text":"<p>The Projects component provides a comprehensive view of all projects within the Digital Landscape application. It displays projects in a sortable, searchable list with visual indicators of technology distribution across different Tech Radar rings.</p>"},{"location":"components/projects/#features","title":"Features","text":"<ul> <li>Displays all projects with clickable entries for detailed views</li> <li>Multiple sorting criteria including alphabetical, technology count, and status ratios</li> <li>Real-time filtering of projects based on search terms</li> <li>Colour-coded bars showing the proportion of technologies in each radar ring</li> <li>Ability to refresh project data on demand</li> <li>Adapts to different screen sizes for optimal viewing</li> </ul>"},{"location":"components/projects/#props","title":"Props","text":"<p>The Projects component accepts the following props:</p> Prop Type Default Description <code>isOpen</code> boolean Required Controls the visibility of the projects list <code>projectsData</code> array Required Array of project objects containing project details <code>handleProjectClick</code> function Required Handler function called when a project is clicked <code>getTechnologyStatus</code> function Required Function to determine the Tech Radar status of a technology <code>onRefresh</code> function Required Handler function to refresh the projects data"},{"location":"components/projects/#usage","title":"Usage","text":"<pre><code>import Projects from '../components/Projects/Projects';\n\nfunction ProjectsPage() {\n  const [isProjectsOpen, setIsProjectsOpen] = useState(true);\n  const [projectsData, setProjectsData] = useState([]);\n  const [selectedProject, setSelectedProject] = useState(null);\n\n  const handleProjectClick = (project) =&gt; {\n    setSelectedProject(project);\n    // Open project modal or navigate to project details\n  };\n\n  const getTechnologyStatus = (techName) =&gt; {\n    // Return the status of the technology (adopt, trial, assess, hold)\n  };\n\n  const refreshProjects = async () =&gt; {\n    // Fetch updated project data\n    const data = await fetchProjects();\n    setProjectsData(data);\n  };\n\n  return (\n    &lt;div className=\"projects-page\"&gt;\n      &lt;Projects\n        isOpen={isProjectsOpen}\n        projectsData={projectsData}\n        handleProjectClick={handleProjectClick}\n        getTechnologyStatus={getTechnologyStatus}\n        onRefresh={refreshProjects}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/projects/#technology-distribution-calculation","title":"Technology Distribution Calculation","text":"<p>The Projects component calculates technology distribution for each project by:</p> <ol> <li>Extracting technologies from relevant fields in the project data</li> <li>Determining the Tech Radar status of each technology (Adopt, Trial, Assess, Hold (ignoring review and ignore)) based off the last entry in the timeline</li> <li>Calculating the proportion of technologies in each status category</li> <li>Visualising the distribution as a segmented, colour-coded bar</li> </ol>"},{"location":"components/projects/#sorting-options","title":"Sorting Options","text":"<p>The component provides multiple sorting mechanisms:</p>"},{"location":"components/projects/#name-sorting","title":"Name Sorting","text":"<ul> <li>A to Z: Alphabetical sorting by project name</li> <li>Z to A: Reverse alphabetical sorting by project name</li> </ul>"},{"location":"components/projects/#technology-count-sorting","title":"Technology Count Sorting","text":"<ul> <li>Most Technologies: Projects with the highest number of technologies first</li> <li>Least Technologies: Projects with the lowest number of technologies first</li> </ul>"},{"location":"components/projects/#technology-status-sorting","title":"Technology Status Sorting","text":"<ul> <li>Most or Least Ratio:<ul> <li>Adopt Ratio: Sort by the proportion of technologies in the Adopt ring</li> <li>Trial Ratio: Sort by the proportion of technologies in the Trial ring</li> <li>Assess Ratio: Sort by the proportion of technologies in the Assess ring</li> <li>Hold Ratio: Sort by the proportion of technologies in the Hold ring</li> </ul> </li> </ul>"},{"location":"components/projects/#search-functionality","title":"Search Functionality","text":"<p>The search feature filters projects based on multiple fields:</p> <ul> <li>Project name</li> <li>Project short name</li> <li>Project area</li> <li>Team name</li> <li>Programme name</li> <li>Programme short name</li> </ul> <p>The search is case-insensitive and updates the project list in real-time as the user types.</p>"},{"location":"components/projects/#visual-indicators","title":"Visual Indicators","text":"<p>Each project entry includes a visual representation of its technology composition:</p> <ul> <li>Adopt: Technologies recommended for adoption</li> <li>Trial: Technologies in trial phase</li> <li>Assess: Technologies being assessed</li> <li>Hold: Technologies not recommended for new projects</li> <li>Unknown: Technologies not found in the Tech Radar</li> </ul> <p>Hovering over each segment displays a tooltip with the exact count and percentage.</p>"},{"location":"components/projects/#styling","title":"Styling","text":"<p>The Projects component uses dedicated CSS defined in <code>../../styles/components/Projects.css</code> with:</p>"},{"location":"components/projects/projectModal/","title":"ProjectModal Component Documentation","text":"<p>The ProjectModal component provides a detailed view of project information in a modal dialogue. It displays comprehensive project details including linked repositories, technology stacks, and various metadata organised into logical groupings for easy navigation and reference.</p>"},{"location":"components/projects/projectModal/#features","title":"Features","text":"<ul> <li>Fetches and displays GitHub repository data for linked projects</li> <li>Shows language usage statistics with colour-coded bars</li> <li>Organises project details into logical groupings</li> <li>Allows filtering of project details by search terms</li> <li>Provides clickable technology tags that link to the Tech Radar</li> <li>Displays repository status, visibility, and last commit information</li> </ul>"},{"location":"components/projects/projectModal/#props","title":"Props","text":"<p>The ProjectModal component accepts the following props:</p> Prop Type Default Description <code>isOpen</code> boolean Required Controls the visibility of the modal <code>onClose</code> function Required Handler function called when the modal is closed <code>project</code> object Required The project object containing all project details <code>renderTechnologyList</code> function Required Function to render technology lists in a consistent format <code>getTechnologyStatus</code> function Required Function to determine the Tech Radar status of a technology <code>onTechClick</code> function Required Handler for when a technology tag is clicked"},{"location":"components/projects/projectModal/#usage","title":"Usage","text":"<pre><code>import ProjectModal from '../components/Projects/ProjectModal';\n\nfunction ProjectsView() {\n  const [selectedProject, setSelectedProject] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleTechClick = (techName) =&gt; {\n    // Navigate to tech radar or show tech details\n  };\n\n  const getTechStatus = (techName) =&gt; {\n    // Return the status of the technology (adopt, trial, assess, hold)\n  };\n\n  return (\n    &lt;div className=\"projects-container\"&gt;\n      {/* Project list or grid */}\n\n      &lt;ProjectModal\n        isOpen={isModalOpen}\n        onClose={() =&gt; setIsModalOpen(false)}\n        project={selectedProject}\n        renderTechnologyList={(technologies) =&gt; (\n          &lt;div className=\"tech-list\"&gt;\n            {technologies.map(tech =&gt; &lt;span key={tech}&gt;{tech}&lt;/span&gt;)}\n          &lt;/div&gt;\n        )}\n        getTechnologyStatus={getTechStatus}\n        onTechClick={handleTechClick}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"components/projects/projectModal/#repository-information","title":"Repository Information","text":"<p>The ProjectModal fetches and displays detailed information about linked GitHub repositories:</p> <ul> <li>Repository Status: Shows if a repository is active or archived</li> <li>Visibility: Indicates if a repository is public or private</li> <li>Last Commit: Displays the date of the last commit with visual indicators for stale repositories</li> <li>Language Breakdown: Visualises the programming languages used in the repository with proportional bars</li> <li>Technology Tags: Lists technologies used with percentages and Tech Radar status indicators</li> </ul>"},{"location":"components/projects/projectModal/#information-grouping","title":"Information Grouping","text":"<p>Project information is organised into logical categories for improved readability:</p> <ol> <li>Languages &amp; Frameworks: Programming languages, frameworks, and testing tools</li> <li>Infrastructure &amp; Deployment: Hosting, cloud services, CI/CD, and containerisation</li> <li>Security &amp; Source Control: Authentication, source control, and branching strategies</li> <li>Quality &amp; Monitoring: Code quality tools, formatters, and monitoring solutions</li> <li>Data Management: Databases, data stores, and output formats</li> <li>Integrations: Internal and external system integrations</li> <li>General Information: Project area, tools, documentation, and collaboration</li> </ol>"},{"location":"components/projects/projectModal/#search-functionality","title":"Search Functionality","text":"<p>The modal includes a search feature that:</p> <ul> <li>Filters displayed information based on both field names and values</li> <li>Updates the view in real-time as the user types</li> <li>Maintains the categorical structure while filtering content</li> <li>Preserves the context of the information being displayed</li> </ul>"},{"location":"components/projects/projectModal/#styling","title":"Styling","text":"<p>The ProjectModal uses dedicated CSS defined in <code>../../styles/components/ProjectModal.css</code> with:</p>"},{"location":"contexts/banner/","title":"Banner Hook Documentation","text":""},{"location":"contexts/banner/#overview","title":"Overview","text":"<p>The Banner Hook provides a convenient way to display persistent informational messages to users. It utilises React's toast notifications with enhanced functionality for dismissal memory, ensuring users aren't repeatedly shown the same messages unnecessarily.</p>"},{"location":"contexts/banner/#features","title":"Features","text":"<ul> <li>Persistent Notifications: Displays important messages that remain visible until explicitly dismissed</li> <li>Dismissal Memory: Remembers when a user has dismissed a banner using local storage</li> <li>Time-Based Reappearance: Automatically shows banners again after a specified period (default: 7 days)</li> <li>Customisable Messages: Supports any message content to be displayed in the banner</li> <li>Consistent Styling: Utilises application theme variables for visual consistency</li> </ul>"},{"location":"contexts/banner/#usage","title":"Usage","text":"<p>The <code>useBanner</code> hook is designed to be simple to implement within any functional component.</p> <pre><code>import { useBanner } from '../contexts/banner';\n\nfunction MyComponent() {\n  // Parameters: message text, unique local storage key\n  useBanner(\"Welcome to our application! This is an important announcement.\", \"welcome-banner\");\n\n  return (\n    &lt;div&gt;\n      {/* Your component content */}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"contexts/banner/#parameters","title":"Parameters","text":"<p>The <code>useBanner</code> hook accepts two parameters:</p> <ol> <li>message (string): The text content to display in the banner</li> <li>localStorageKey (string): A unique identifier used to store dismissal information in the browser's local storage</li> </ol>"},{"location":"contexts/banner/#implementation-details","title":"Implementation Details","text":"<p>The banner system works through the following process:</p> <ol> <li>Initial Check: When a component mounts, the hook checks if the banner has been previously dismissed</li> <li>Dismissal Logic: </li> <li>If the banner hasn't been dismissed before, it displays immediately</li> <li>If dismissed, it checks when the dismissal occurred</li> <li>If the dismissal was more than 7 days ago, it shows the banner again</li> <li>User Interaction: When a user dismisses the banner, the current timestamp is stored in local storage</li> <li>Visual Presentation: The banner appears as a toast notification in the bottom-right corner of the screen with an \"Info\" header and a checkmark button for dismissal</li> </ol>"},{"location":"contexts/banner/#styling","title":"Styling","text":"<p>The banner utilises custom CSS defined in <code>../styles/Banner.css</code> and leverages CSS variables for theming:</p> <ul> <li><code>--info-box</code>: Background colour of the banner</li> <li><code>--info-box-border</code>: Colour of the left border accent</li> </ul>"},{"location":"contexts/banner/#best-practices","title":"Best Practices","text":"<ul> <li>Use unique <code>localStorageKey</code> values for different banners to ensure proper dismissal tracking</li> <li>Keep banner messages concise and informative</li> <li>Use banners sparingly for truly important information to avoid user fatigue</li> <li>Consider the timing of banner displays in your application flow</li> </ul>"},{"location":"contexts/banner/#integration-with-theme","title":"Integration with Theme","text":"<p>The banner system integrates with the application's theme system, ensuring that banners maintain visual consistency with the rest of the interface regardless of whether light or dark mode is active.</p>"},{"location":"contexts/dataContext/","title":"Data Context Documentation","text":""},{"location":"contexts/dataContext/#overview","title":"Overview","text":"<p>The DataContext provides centralised data management and caching for the Tech Radar application. It handles fetching and caching of CSV data, Tech Radar data, repository data, and repository statistics.</p>"},{"location":"contexts/dataContext/#core-functionality","title":"Core Functionality","text":""},{"location":"contexts/dataContext/#state-management","title":"State Management","text":"<p>The context maintains four main pieces of state: - csvData: Project and technology information - techRadarData: Tech Radar entries and their statuses - repositoryData: Repository-specific information (cached with Map) - repositoryStats: General repository statistics (cached with Map)</p>"},{"location":"contexts/dataContext/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Uses in-memory caching with React state</li> <li>Implements request deduplication using pendingRequests</li> <li>Supports forced refresh when needed</li> <li>Uses Map objects for parameterised data (repository data and stats)</li> </ul>"},{"location":"contexts/dataContext/#request-handling","title":"Request Handling","text":"<ol> <li>Check if data exists in cache</li> <li>Check if there's a pending request for the same data</li> <li>Make new request if needed</li> <li>Cache the response</li> <li>Clean up pending request</li> </ol>"},{"location":"contexts/dataContext/#usage-in-pages","title":"Usage in Pages","text":""},{"location":"contexts/dataContext/#radarpage","title":"RadarPage","text":"<pre><code>const { getTechRadarData, getCsvData } = useData();\n\n// Fetches and caches tech radar data\nuseEffect(() =&gt; {\n  getTechRadarData().then(data =&gt; setData(data));\n}, [getTechRadarData]);\n\n// Fetches and caches project data\nuseEffect(() =&gt; {\n  getCsvData().then(data =&gt; setProjectsData(data));\n}, [getCsvData]);\n</code></pre>"},{"location":"contexts/dataContext/#statisticspage","title":"StatisticsPage","text":"<pre><code>const { getTechRadarData, getRepositoryStats, getCsvData } = useData();\n\n// Initial data load\nuseEffect(() =&gt; {\n  const [techData, projectData] = await Promise.all([\n    getTechRadarData(),\n    getCsvData()\n  ]);\n}, []);\n\n// Fetching statistics with parameters\nconst fetchStatistics = async (date, repoView) =&gt; {\n  const statsResponse = await getRepositoryStats(\n    date,\n    repoView === \"archived\" ? \"true\" : \"false\"\n  );\n};\n</code></pre>"},{"location":"contexts/dataContext/#projectspage","title":"ProjectsPage","text":"<pre><code>const { getCsvData, getTechRadarData } = useData();\n\n// Combined data fetching\nuseEffect(() =&gt; {\n  const [csvData, techData] = await Promise.all([\n    getCsvData(),\n    getTechRadarData()\n  ]);\n}, []);\n\n// Forced refresh\nconst handleRefresh = async () =&gt; {\n  const newData = await getCsvData(true); // forceRefresh=true\n};\n</code></pre>"},{"location":"contexts/dataContext/#cache-invalidation","title":"Cache Invalidation","text":"<p>The context provides a clearCache method to reset all cached data: <pre><code>const { clearCache } = useData();\nclearCache(); // Clears all cached data\n</code></pre></p>"},{"location":"contexts/dataContext/#error-handling","title":"Error Handling","text":"<ul> <li>Each fetch method includes error handling</li> <li>Failed requests return null</li> <li>Components should handle null responses appropriately</li> <li>Toast notifications for user feedback</li> </ul>"},{"location":"contexts/dataContext/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Deduplication of in-flight requests prevents redundant API calls</li> <li>Cached data reduces server load and improves response time</li> <li>ForceRefresh parameter allows manual cache invalidation</li> <li>Map-based caching enables efficient parameter-based data storage</li> </ol>"},{"location":"contexts/dataContext/#best-practices","title":"Best Practices","text":"<ol> <li>Always use useData hook within components</li> <li>Include context methods in useEffect dependencies</li> <li>Handle loading and error states in components</li> <li>Use forceRefresh sparingly</li> <li>Clear cache when data consistency is required</li> </ol>"},{"location":"contexts/themeContext/","title":"Theme Context Documentation","text":""},{"location":"contexts/themeContext/#overview","title":"Overview","text":"<p>The Theme Context provides a centralised way to manage the application's theme state (light or dark mode) throughout the component tree. It utilises React's Context API to make the theme accessible to any component without prop drilling.</p>"},{"location":"contexts/themeContext/#components-and-hooks","title":"Components and Hooks","text":""},{"location":"contexts/themeContext/#themeprovider","title":"ThemeProvider","text":"<p>The <code>ThemeProvider</code> is a wrapper component that establishes the theme context for its children. It should be placed high in the component hierarchy, typically around your application's root component.</p>"},{"location":"contexts/themeContext/#features","title":"Features","text":"<ul> <li>Theme Persistence: Automatically saves the user's theme preference to local storage</li> <li>Theme Application: Applies the selected theme to the document by adding appropriate CSS classes</li> <li>Toast Integration: Includes a pre-configured toast notification system that respects the current theme</li> </ul>"},{"location":"contexts/themeContext/#usage","title":"Usage","text":"<pre><code>import { ThemeProvider } from '../contexts/ThemeContext';\n\nfunction App() {\n  return (\n    &lt;ThemeProvider&gt;\n      {/* Your application components */}\n    &lt;/ThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"contexts/themeContext/#usetheme-hook","title":"useTheme Hook","text":"<p>The <code>useTheme</code> hook provides access to the current theme state and functionality to toggle between themes.</p>"},{"location":"contexts/themeContext/#returns","title":"Returns","text":"<ul> <li><code>theme</code>: The current theme value ('light' or 'dark')</li> <li><code>toggleTheme</code>: A function to switch between light and dark themes</li> </ul>"},{"location":"contexts/themeContext/#usage_1","title":"Usage","text":"<pre><code>import { useTheme } from '../contexts/ThemeContext';\n\nfunction ThemeToggleButton() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    &lt;button onClick={toggleTheme}&gt;\n      Current theme: {theme}\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"contexts/themeContext/#implementation-details","title":"Implementation Details","text":"<p>The theme context uses React's useState and useEffect hooks to:</p> <ol> <li>Initialise the theme from local storage or default to 'light'</li> <li>Persist theme changes to local storage</li> <li>Apply theme classes to the document and body elements</li> <li>Provide a simple toggle mechanism between 'light' and 'dark' modes</li> </ol>"},{"location":"contexts/themeContext/#error-handling","title":"Error Handling","text":"<p>The <code>useTheme</code> hook will throw an error if used outside of a <code>ThemeProvider</code>. Always ensure components using this hook are descendants of a <code>ThemeProvider</code> component.</p>"},{"location":"contexts/themeContext/#toast-notifications","title":"Toast Notifications","text":"<p>The ThemeProvider includes a pre-configured toast notification system (using react-hot-toast) that:</p> <ul> <li>Positions toasts in the bottom-right corner</li> <li>Applies theme-consistent styling to all notifications</li> <li>Sets a default duration of 3 seconds for each toast</li> </ul>"},{"location":"contexts/themeContext/#best-practices","title":"Best Practices","text":"<ul> <li>Place the <code>ThemeProvider</code> at the root of your application</li> <li>Use the <code>useTheme</code> hook to access theme information rather than creating separate state</li> <li>Leverage CSS variables defined in your theme to ensure consistent styling</li> </ul>"},{"location":"pages/projects/","title":"Projects","text":"<p>The Projects section provides a comprehensive view of all projects and their technology stacks gathered by the Tech Audit tool.</p>"},{"location":"pages/projects/#overview","title":"Overview","text":"<p>The Projects interface allows you to:</p> <ul> <li>View all projects recorded by the Tech Audit tool</li> <li>View project information with the Project Modal</li> <li>Sort by, refresh and search</li> </ul>"},{"location":"pages/projects/#sorting","title":"Sorting","text":"<ul> <li>Alphabetical (asc/desc)</li> <li>Technology count (asc/desc)</li> <li>Technology status (most/least)<ul> <li>There are 2 boxes where a user can select the technology ring from the Radar (adopt, trial, assess, hold) and a box to choose most ratio or least ratio.</li> <li>Select a ring in the left box. Then select a ratio. The list will be filtered with the percentage of technolgies used within that project with that ring, sorted by the ratio.</li> <li>To best understand this feature, test it for yourself or read the example below.</li> <li>For example:<ul> <li>Project A has 10 technologies. 9 are in the adopt ring, 1 is in the hold ring.</li> <li>Project B has 10 technologies. 1 is in the adopt ring, 9 are in the hold ring.</li> <li>If a user selects the 'Adopt' ring and the 'Most Ratio', then Project A will be at the top of the list.</li> <li>If a user selects the 'Hold' ring and the 'Most Ratio', then Project B will be at the top of the list.</li> </ul> </li> </ul> </li> </ul>"},{"location":"pages/projects/#refresh","title":"Refresh","text":"<ul> <li>Click the refresh button to refresh the list or just refresh the page manually. </li> <li>This refreshes the data without refreshing other cached data, which manually refreshing would do.</li> </ul>"},{"location":"pages/projects/#search","title":"Search","text":"<ul> <li>Use the search bar to search for a project (CMD + K or CTRL + K)</li> <li>The search will filter the project list</li> </ul>"},{"location":"pages/radar/","title":"Tech Radar","text":"<p>The Tech Radar is an interactive visualisation tool that helps track and manage technology adoption across the organisation.</p>"},{"location":"pages/radar/#overview","title":"Overview","text":"<p>The Tech Radar provides a visual representation of technologies categorised into four quadrants:</p> <ul> <li>Languages: such as Python, JavaScript, Java</li> <li>Frameworks: such as Flask, React, Spring</li> <li>Supporting Tools: such as CI/CD (e.g. Jenkins, GitHub Actions, Concourse) and other tools used for development, documentation and project management (e.g. VSCode, Confluence, Jira)</li> <li>Infrastructure: such as AWS, Azure, GCP</li> </ul> <p>Each technology is placed in one of four rings:</p> <ul> <li>Adopt: aim to widely adopt and mature</li> <li>Trial: aim to try out and evaluate</li> <li>Assess: aim to assess for potential adoption</li> <li>Hold: not recommended for new deployment without approval</li> </ul>"},{"location":"pages/radar/#features","title":"Features","text":""},{"location":"pages/radar/#interactive-visualisation","title":"Interactive Visualisation","text":"<ul> <li>Hover over blips to view information or click to lock selection</li> <li>Drag quadrant lists to customise your view</li> <li>Filter technologies by quadrant by clicking on the label around the radar</li> <li>Search functionality for quick access (CMD + K or CTRL + K)</li> </ul>"},{"location":"pages/radar/#technology-details","title":"Technology Details","text":"<ul> <li>Using the Info Box component, you can view:<ul> <li>Current adoption status</li> <li>Timeline of changes</li> <li>Related projects</li> </ul> </li> </ul>"},{"location":"pages/radar/#navigation","title":"Navigation","text":"<ul> <li>Keyboard shortcuts:<ul> <li>Press key <code>1</code> to move up the list</li> <li>Press key <code>2</code> to move down the list</li> </ul> </li> </ul>"},{"location":"pages/review/","title":"Review Dashboard","text":"<p>The Review Dashboard provides administrative tools for managing the Tech Radar technologies.</p>"},{"location":"pages/review/#overview","title":"Overview","text":"<p>The Review interface allows authorised users to: - Update technology ring - Add new technologies - Track changes</p>"},{"location":"pages/statistics/","title":"Statistics","text":"<p>The Statistics section provides detailed analytics and insights into repository usage and technology adoption across the organisation.</p>"},{"location":"pages/statistics/#overview","title":"Overview","text":""},{"location":"pages/statistics/#repository-statistics","title":"Repository Statistics","text":"<ul> <li>Total repository count</li> <li>Public, private and internal repository counts</li> <li>Active vs. archived repositories</li> <li>Recent activity metrics</li> </ul>"},{"location":"pages/statistics/#repository-filters","title":"Repository Filters","text":"<ul> <li>Date range filter</li> <li>Active/archived/all filter</li> <li>Project filter using multi-select</li> </ul>"},{"location":"pages/statistics/#how-to-use","title":"How to use:","text":"<ul> <li>Click on the filter buttons under the 'Repository Statistics' heading</li> <li>Select the filters you want to apply</li> <li>Changes show instantly</li> </ul>"},{"location":"pages/statistics/#language-statistics","title":"Language Statistics","text":"<ul> <li>Sort by:<ul> <li>Alphabetical (asc/desc)</li> <li>Number of repositories (asc/desc)</li> <li>Usage of language per repository (asc/desc)</li> <li>Size (percentage of that language in a repository) (asc/desc)</li> </ul> </li> <li>Toggles:<ul> <li>Show Average Size or Total Size on each language card</li> <li>Show languages only on the Tech Radar (part of the Tech Radar JSON)</li> </ul> </li> </ul>"},{"location":"pages/statistics/#how-to-use_1","title":"How to use:","text":"<ul> <li>Click on the sort/toggle buttons under the 'Language Statistics' heading</li> <li>Select the filters you want to apply</li> <li> <p>Changes show instantly</p> </li> <li> <p>Hover over a language card</p> </li> <li> <p>Total repositories will show a percentage of the total number of repositories</p> </li> <li> <p>Click on a language card that has a colour other than grey and it will take you to the /radar page with the info box filled with the language details</p> </li> <li> <p>Use the search bar to search for a language (CMD + K or CTRL + K)</p> </li> </ul>"},{"location":"testing/","title":"Testing Documentation","text":""},{"location":"testing/#overview","title":"Overview","text":"<p>The Digital Landscape application includes a comprehensive testing framework to ensure API endpoints function correctly and reliably. The testing suite focuses primarily on backend API validation, verifying that data is correctly retrieved, filtered, and processed according to specifications.</p>"},{"location":"testing/#testing-architecture","title":"Testing Architecture","text":"<p>The testing framework is built using Python with pytest and follows these key principles:</p> <ul> <li>Isolated Tests: Each test function validates a specific endpoint or functionality</li> <li>Comprehensive Coverage: Tests cover all API endpoints and their various parameters</li> <li>Clear Documentation: Each test includes detailed docstrings explaining purpose and expectations</li> <li>Error Handling Validation: Tests verify proper error responses for invalid inputs</li> </ul>"},{"location":"testing/#test-setup","title":"Test Setup","text":""},{"location":"testing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Make (for using Makefile commands)</li> <li>Backend server running on localhost:5001</li> </ul>"},{"location":"testing/#installation","title":"Installation","text":"<pre><code># Navigate to the testing directory\ncd testing\n\n# Create a virtual environment (recommended)\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\nmake setup\n</code></pre>"},{"location":"testing/#running-tests","title":"Running Tests","text":"<p>The testing framework provides several commands for running tests:</p> <pre><code># Run all tests\nmake test\n\n# Run a specific test\npython3 -m pytest backend/test_main.py::test_name -v\n\n# Example: Run only the health check test\npython3 -m pytest backend/test_main.py::test_health_check -v\n</code></pre>"},{"location":"testing/#test-categories","title":"Test Categories","text":"<p>The test suite covers the following API endpoints:</p>"},{"location":"testing/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>Tests the <code>/api/health</code> endpoint to verify server status and health metrics.</p> <p>Test the health check endpoint functionality.</p> <p>This test verifies that the health check endpoint is operational and returns the expected health status information about the server. It checks for the presence of essential health metrics and status indicators.</p> Endpoint <p>GET /api/health</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>\"healthy\" status indicator</li> <li>Current timestamp</li> <li>Server uptime in seconds</li> <li>Memory usage statistics</li> <li>Process ID</li> </ul> </li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_health_check():\n    \"\"\"Test the health check endpoint functionality.\n\n    This test verifies that the health check endpoint is operational and returns\n    the expected health status information about the server. It checks for the\n    presence of essential health metrics and status indicators.\n\n    Endpoint:\n        GET /api/health\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - \"healthy\" status indicator\n            - Current timestamp\n            - Server uptime in seconds\n            - Memory usage statistics\n            - Process ID\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/health\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"status\"] == \"healthy\"\n    assert \"timestamp\" in data\n    assert \"uptime\" in data\n    assert \"memory\" in data\n    assert \"pid\" in data\n</code></pre>"},{"location":"testing/#project-data-endpoint","title":"Project Data Endpoint","text":"<p>Tests the <code>/api/csv</code> endpoint that provides project data from CSV sources.</p> <p>Test the CSV data endpoint functionality.</p> <p>This test verifies that the CSV endpoint correctly returns parsed CSV data from the S3 bucket. It checks that the data is properly formatted and contains the expected structure.</p> Endpoint <p>GET /api/csv</p> Expects <ul> <li>200 status code</li> <li>JSON array response</li> <li>Non-empty data entries</li> <li>Each entry should be a dictionary with multiple fields</li> <li>No empty or malformed entries</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_csv_endpoint():\n    \"\"\"Test the CSV data endpoint functionality.\n\n    This test verifies that the CSV endpoint correctly returns parsed CSV data\n    from the S3 bucket. It checks that the data is properly formatted and\n    contains the expected structure.\n\n    Endpoint:\n        GET /api/csv\n\n    Expects:\n        - 200 status code\n        - JSON array response\n        - Non-empty data entries\n        - Each entry should be a dictionary with multiple fields\n        - No empty or malformed entries\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/csv\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, list)\n    if len(data) &gt; 0:\n        first_item = data[0]\n        assert isinstance(first_item, dict)\n        assert len(first_item.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/#tech-radar-data-endpoint","title":"Tech Radar Data Endpoint","text":"<p>Tests the <code>/api/tech-radar/json</code> endpoint that provides Tech Radar configuration data.</p> <p>Test the tech radar JSON endpoint functionality.</p> <p>This test verifies that the tech radar endpoint correctly returns the radar configuration data from the S3 bucket. The data defines the structure and content of the technology radar visualization.</p> Endpoint <p>GET /api/tech-radar/json</p> Expects <ul> <li>200 status code</li> <li>JSON object response</li> <li>Non-empty configuration data</li> <li>Multiple configuration keys present</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_tech_radar_json_endpoint():\n    \"\"\"Test the tech radar JSON endpoint functionality.\n\n    This test verifies that the tech radar endpoint correctly returns the\n    radar configuration data from the S3 bucket. The data defines the structure\n    and content of the technology radar visualization.\n\n    Endpoint:\n        GET /api/tech-radar/json\n\n    Expects:\n        - 200 status code\n        - JSON object response\n        - Non-empty configuration data\n        - Multiple configuration keys present\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, dict)\n    assert len(data.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/#repository-statistics-endpoints","title":"Repository Statistics Endpoints","text":"<p>Tests the <code>/api/json</code> endpoint with various filtering parameters:</p> <ul> <li>No parameters (default behavior)</li> <li>Date filtering</li> <li>Archived status filtering</li> <li>Combined parameter filtering</li> <li>Invalid parameter handling</li> </ul> <p>Test the JSON endpoint without query parameters.</p> <p>This test verifies the default behavior of the JSON endpoint when no filters are applied. It checks that the endpoint returns complete repository statistics and metadata.</p> Endpoint <p>GET /api/json</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>Repository statistics</li> <li>Language usage statistics</li> <li>Metadata information</li> </ul> </li> <li>Complete stats structure with:<ul> <li>Total repository count</li> <li>Private repository count</li> <li>Public repository count</li> <li>Internal repository count</li> </ul> </li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_no_params():\n    \"\"\"Test the JSON endpoint without query parameters.\n\n    This test verifies the default behavior of the JSON endpoint when no\n    filters are applied. It checks that the endpoint returns complete\n    repository statistics and metadata.\n\n    Endpoint:\n        GET /api/json\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - Repository statistics\n            - Language usage statistics\n            - Metadata information\n        - Complete stats structure with:\n            - Total repository count\n            - Private repository count\n            - Public repository count\n            - Internal repository count\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n</code></pre> <p>Test the JSON endpoint with datetime filtering.</p> <p>This test verifies that the endpoint correctly filters repository data based on a specified datetime parameter. It checks repositories modified within the last 7 days.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>ISO formatted datetime string for filtering</p> required Example <p>GET /api/json?datetime=2024-03-20T00:00:00Z</p> Expects <ul> <li>200 status code</li> <li>Filtered repository data</li> <li>Metadata containing the applied datetime filter</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_with_datetime():\n    \"\"\"Test the JSON endpoint with datetime filtering.\n\n    This test verifies that the endpoint correctly filters repository data\n    based on a specified datetime parameter. It checks repositories modified\n    within the last 7 days.\n\n    Parameters:\n        datetime (str): ISO formatted datetime string for filtering\n\n    Example:\n        GET /api/json?datetime=2024-03-20T00:00:00Z\n\n    Expects:\n        - 200 status code\n        - Filtered repository data\n        - Metadata containing the applied datetime filter\n    \"\"\"\n    seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()\n    response = requests.get(f\"{BASE_URL}/api/json\", params={\"datetime\": seven_days_ago}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] == seven_days_ago\n</code></pre>"},{"location":"testing/#repository-project-endpoints","title":"Repository Project Endpoints","text":"<p>Tests the <code>/api/repository/project/json</code> endpoint with various parameters:</p> <ul> <li>Missing parameters (error handling)</li> <li>Single repository filtering</li> <li>Multiple repository filtering</li> <li>Date filtering</li> <li>Archived status filtering</li> <li>Combined parameter filtering</li> <li>Language statistics validation</li> </ul> <p>Test the repository project JSON endpoint with a valid repository parameter.</p> <p>This test verifies the endpoint's basic functionality when requesting data for a single repository. It checks the complete response structure including repository data, statistics, and metadata.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Name of the repository to query (e.g., \"tech-radar\")</p> required Expects <ul> <li>200 status code</li> <li>JSON response with complete repository data</li> <li>Valid statistics for the repository</li> <li>Correct metadata including requested repository names</li> <li>Language statistics if available</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_repository_project_json_with_repos():\n    \"\"\"Test the repository project JSON endpoint with a valid repository parameter.\n\n    This test verifies the endpoint's basic functionality when requesting data\n    for a single repository. It checks the complete response structure including\n    repository data, statistics, and metadata.\n\n    Parameters:\n        repositories (str): Name of the repository to query (e.g., \"tech-radar\")\n\n    Expects:\n        - 200 status code\n        - JSON response with complete repository data\n        - Valid statistics for the repository\n        - Correct metadata including requested repository names\n        - Language statistics if available\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/repository/project/json\", params={\"repositories\": \"tech-radar\"}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify response structure\n    assert \"repositories\" in data\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    # Verify stats structure\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n\n    # Verify metadata\n    metadata = data[\"metadata\"]\n    assert \"requested_repos\" in metadata\n    assert \"found_repos\" in metadata\n    assert metadata[\"requested_repos\"] == [\"tech-radar\"]\n</code></pre> <p>Test the repository project JSON endpoint with multiple repositories.</p> <p>This test verifies that the endpoint correctly handles requests for multiple repositories in a single call. It checks that all requested repositories are processed and included in the response.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Comma-separated list of repository names</p> required Example <p>GET /api/repository/project/json?repositories=tech-radar,another-repo</p> Expects <ul> <li>200 status code</li> <li>Data for all requested repositories</li> <li>Metadata containing all requested repository names</li> <li>Aggregated statistics across all repositories</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_repository_project_json_multiple_repos():\n    \"\"\"Test the repository project JSON endpoint with multiple repositories.\n\n    This test verifies that the endpoint correctly handles requests for\n    multiple repositories in a single call. It checks that all requested\n    repositories are processed and included in the response.\n\n    Parameters:\n        repositories (str): Comma-separated list of repository names\n\n    Example:\n        GET /api/repository/project/json?repositories=tech-radar,another-repo\n\n    Expects:\n        - 200 status code\n        - Data for all requested repositories\n        - Metadata containing all requested repository names\n        - Aggregated statistics across all repositories\n    \"\"\"\n    params = {\n        \"repositories\": \"tech-radar,another-repo\"\n    }\n    response = requests.get(f\"{BASE_URL}/api/repository/project/json\", params=params, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the requested repos are in metadata\n    assert len(data[\"metadata\"][\"requested_repos\"]) == 2\n    assert \"tech-radar\" in data[\"metadata\"][\"requested_repos\"]\n    assert \"another-repo\" in data[\"metadata\"][\"requested_repos\"]\n</code></pre>"},{"location":"testing/#tech-radar-update-endpoints","title":"Tech Radar Update Endpoints","text":"<p>Tests the endpoints for updating Tech Radar data:</p> <ul> <li>Empty update handling</li> <li>Partial updates</li> <li>Invalid entry handling</li> <li>Structure validation</li> <li>Reference validation</li> </ul> <p>Test the tech radar update endpoint with valid complete structure.</p> <p>This test verifies that the endpoint correctly processes a complete tech radar update with valid structure for all components.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Valid title</li> <li>Valid quadrants with required fields</li> <li>Valid rings with required fields</li> <li>Valid entries with required fields</li> </ul> Expects <ul> <li>200 status code</li> <li>Successful update confirmation</li> <li>Correct structure in stored data</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_tech_radar_update_valid_structure():\n    \"\"\"Test the tech radar update endpoint with valid complete structure.\n\n    This test verifies that the endpoint correctly processes a complete\n    tech radar update with valid structure for all components.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Valid title\n        - Valid quadrants with required fields\n        - Valid rings with required fields\n        - Valid entries with required fields\n\n    Expects:\n        - 200 status code\n        - Successful update confirmation\n        - Correct structure in stored data\n    \"\"\"\n    random_number = random.randint(100,1000)\n    test_data = {\n        \"entries\": [\n            {\n                \"id\": \"test-entry-1\",\n                \"title\": \"Test Entry 1\",\n                \"description\": \"Languages\",\n                \"key\": \"test1\",\n                \"url\": \"#\",\n                \"quadrant\": \"1\",\n                \"timeline\": [\n                    {\n                        \"moved\": 0,\n                        \"ringId\": \"ignore\",\n                        \"date\": \"2000-01-01\",\n                        \"description\": f\"For testing purposes [CASE:{random_number}:2]\"\n                    }\n                ],\n                \"links\": []\n            }\n        ]\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    assert response.json()[\"message\"] == \"Tech radar updated successfully\"\n\n    # Verify the update\n    get_response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert get_response.status_code == 200\n    updated_data = get_response.json()\n\n    # Verify entry structure\n    entries = updated_data[\"entries\"]\n    test_entry = next((entry for entry in entries if entry[\"id\"] == \"test-entry-1\"), None)\n    assert test_entry is not None, \"No entry with id 'test-entry-1' found\"\n    assert str(random_number) in test_entry[\"timeline\"][0][\"description\"], \"Entry with id 'test-entry-1' does not have the expected description\"\n</code></pre>"},{"location":"testing/#error-handling-tests","title":"Error Handling Tests","text":"<p>The test suite includes specific tests for error conditions:</p> <ul> <li>Invalid endpoints</li> <li>Invalid date parameters</li> <li>Missing required parameters</li> <li>Invalid data structures</li> </ul> <p>Test error handling for invalid endpoints.</p> <p>This test verifies that the server properly handles requests to non-existent endpoints by returning appropriate error status codes.</p> Example <p>GET /api/nonexistent</p> Expects <ul> <li>Either 404 (Not Found) or 500 (Internal Server Error) status code</li> <li>Proper error handling for invalid routes</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_invalid_endpoint():\n    \"\"\"Test error handling for invalid endpoints.\n\n    This test verifies that the server properly handles requests to\n    non-existent endpoints by returning appropriate error status codes.\n\n    Example:\n        GET /api/nonexistent\n\n    Expects:\n        - Either 404 (Not Found) or 500 (Internal Server Error) status code\n        - Proper error handling for invalid routes\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/nonexistent\", timeout=10)\n    assert response.status_code in [404, 500]  # Either is acceptable\n</code></pre> <p>Test the JSON endpoint's handling of invalid date parameters.</p> <p>This test verifies that the endpoint gracefully handles invalid datetime parameters without failing. It should ignore the invalid date and return unfiltered results.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>An invalid datetime string</p> required Example <p>GET /api/json?datetime=invalid-date</p> Expects <ul> <li>200 status code (graceful handling)</li> <li>Null filter_date in metadata</li> <li>Valid response with unfiltered stats</li> <li>Complete language statistics</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_invalid_date():\n    \"\"\"Test the JSON endpoint's handling of invalid date parameters.\n\n    This test verifies that the endpoint gracefully handles invalid datetime\n    parameters without failing. It should ignore the invalid date and return\n    unfiltered results.\n\n    Parameters:\n        datetime (str): An invalid datetime string\n\n    Example:\n        GET /api/json?datetime=invalid-date\n\n    Expects:\n        - 200 status code (graceful handling)\n        - Null filter_date in metadata\n        - Valid response with unfiltered stats\n        - Complete language statistics\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\", params={\"datetime\": \"invalid-date\"}, timeout=10)\n    assert response.status_code == 200  # Backend handles invalid dates gracefully\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] is None\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n</code></pre>"},{"location":"testing/#code-quality","title":"Code Quality","text":"<p>The testing framework includes tools for maintaining code quality:</p> <pre><code># Run linting checks\nmake lint\n\n# Run specific linters\nmake ruff\nmake pylint\n\n# Clean up cache files\nmake clean\n</code></pre>"},{"location":"testing/#integration-with-utilities","title":"Integration with Utilities","text":"<p>The tests validate the same endpoints used by the frontend utilities:</p> <ul> <li>Project Data Utility: Tests the <code>/api/csv</code> endpoint used by <code>fetchCSVFromS3()</code></li> <li>Repository Data Utility: Tests the <code>/api/repository/project/json</code> endpoint used by <code>fetchRepositoryData()</code></li> <li>Tech Radar Data Utility: Tests the <code>/api/tech-radar/json</code> endpoint used by <code>fetchTechRadarJSONFromS3()</code></li> </ul> <p>This ensures that the data providers for the DataContext are functioning correctly and returning the expected data structures.</p>"},{"location":"testing/backend/","title":"Backend Testing","text":""},{"location":"testing/backend/#overview","title":"Overview","text":"<p>The backend testing suite validates the API endpoints that serve data to the Digital Landscape application. These tests ensure that the backend correctly processes requests, applies filters, and returns properly structured data.</p>"},{"location":"testing/backend/#test-implementation","title":"Test Implementation","text":"<p>The backend tests are implemented in <code>testing/backend/test_main.py</code> using the pytest framework and the requests library to make HTTP calls to the API endpoints.</p>"},{"location":"testing/backend/#base-configuration","title":"Base Configuration","text":"<p>All tests use a common base URL configuration:</p> <pre><code>BASE_URL = \"http://localhost:5001\"\n</code></pre>"},{"location":"testing/backend/#health-check-tests","title":"Health Check Tests","text":"<p>The health check endpoint test verifies that the server is operational and returns basic health metrics:</p> <p>Test the health check endpoint functionality.</p> <p>This test verifies that the health check endpoint is operational and returns the expected health status information about the server. It checks for the presence of essential health metrics and status indicators.</p> Endpoint <p>GET /api/health</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>\"healthy\" status indicator</li> <li>Current timestamp</li> <li>Server uptime in seconds</li> <li>Memory usage statistics</li> <li>Process ID</li> </ul> </li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_health_check():\n    \"\"\"Test the health check endpoint functionality.\n\n    This test verifies that the health check endpoint is operational and returns\n    the expected health status information about the server. It checks for the\n    presence of essential health metrics and status indicators.\n\n    Endpoint:\n        GET /api/health\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - \"healthy\" status indicator\n            - Current timestamp\n            - Server uptime in seconds\n            - Memory usage statistics\n            - Process ID\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/health\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"status\"] == \"healthy\"\n    assert \"timestamp\" in data\n    assert \"uptime\" in data\n    assert \"memory\" in data\n    assert \"pid\" in data\n</code></pre>"},{"location":"testing/backend/#project-data-tests","title":"Project Data Tests","text":"<p>The CSV endpoint test verifies that project data is correctly retrieved and formatted:</p> <p>Test the CSV data endpoint functionality.</p> <p>This test verifies that the CSV endpoint correctly returns parsed CSV data from the S3 bucket. It checks that the data is properly formatted and contains the expected structure.</p> Endpoint <p>GET /api/csv</p> Expects <ul> <li>200 status code</li> <li>JSON array response</li> <li>Non-empty data entries</li> <li>Each entry should be a dictionary with multiple fields</li> <li>No empty or malformed entries</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_csv_endpoint():\n    \"\"\"Test the CSV data endpoint functionality.\n\n    This test verifies that the CSV endpoint correctly returns parsed CSV data\n    from the S3 bucket. It checks that the data is properly formatted and\n    contains the expected structure.\n\n    Endpoint:\n        GET /api/csv\n\n    Expects:\n        - 200 status code\n        - JSON array response\n        - Non-empty data entries\n        - Each entry should be a dictionary with multiple fields\n        - No empty or malformed entries\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/csv\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, list)\n    if len(data) &gt; 0:\n        first_item = data[0]\n        assert isinstance(first_item, dict)\n        assert len(first_item.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/backend/#tech-radar-data-tests","title":"Tech Radar Data Tests","text":"<p>The Tech Radar JSON endpoint test verifies that the radar configuration data is correctly retrieved:</p> <p>Test the tech radar JSON endpoint functionality.</p> <p>This test verifies that the tech radar endpoint correctly returns the radar configuration data from the S3 bucket. The data defines the structure and content of the technology radar visualization.</p> Endpoint <p>GET /api/tech-radar/json</p> Expects <ul> <li>200 status code</li> <li>JSON object response</li> <li>Non-empty configuration data</li> <li>Multiple configuration keys present</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_tech_radar_json_endpoint():\n    \"\"\"Test the tech radar JSON endpoint functionality.\n\n    This test verifies that the tech radar endpoint correctly returns the\n    radar configuration data from the S3 bucket. The data defines the structure\n    and content of the technology radar visualization.\n\n    Endpoint:\n        GET /api/tech-radar/json\n\n    Expects:\n        - 200 status code\n        - JSON object response\n        - Non-empty configuration data\n        - Multiple configuration keys present\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert isinstance(data, dict)\n    assert len(data.keys()) &gt; 1  # Verify it's not empty\n</code></pre>"},{"location":"testing/backend/#repository-statistics-tests","title":"Repository Statistics Tests","text":""},{"location":"testing/backend/#basic-statistics","title":"Basic Statistics","text":"<p>Tests the default behavior with no filters:</p> <p>Test the JSON endpoint without query parameters.</p> <p>This test verifies the default behavior of the JSON endpoint when no filters are applied. It checks that the endpoint returns complete repository statistics and metadata.</p> Endpoint <p>GET /api/json</p> Expects <ul> <li>200 status code</li> <li>JSON response containing:<ul> <li>Repository statistics</li> <li>Language usage statistics</li> <li>Metadata information</li> </ul> </li> <li>Complete stats structure with:<ul> <li>Total repository count</li> <li>Private repository count</li> <li>Public repository count</li> <li>Internal repository count</li> </ul> </li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_no_params():\n    \"\"\"Test the JSON endpoint without query parameters.\n\n    This test verifies the default behavior of the JSON endpoint when no\n    filters are applied. It checks that the endpoint returns complete\n    repository statistics and metadata.\n\n    Endpoint:\n        GET /api/json\n\n    Expects:\n        - 200 status code\n        - JSON response containing:\n            - Repository statistics\n            - Language usage statistics\n            - Metadata information\n        - Complete stats structure with:\n            - Total repository count\n            - Private repository count\n            - Public repository count\n            - Internal repository count\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\", timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n</code></pre>"},{"location":"testing/backend/#date-filtering","title":"Date Filtering","text":"<p>Tests filtering repositories by a specific date:</p> <p>Test the JSON endpoint with datetime filtering.</p> <p>This test verifies that the endpoint correctly filters repository data based on a specified datetime parameter. It checks repositories modified within the last 7 days.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>ISO formatted datetime string for filtering</p> required Example <p>GET /api/json?datetime=2024-03-20T00:00:00Z</p> Expects <ul> <li>200 status code</li> <li>Filtered repository data</li> <li>Metadata containing the applied datetime filter</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_with_datetime():\n    \"\"\"Test the JSON endpoint with datetime filtering.\n\n    This test verifies that the endpoint correctly filters repository data\n    based on a specified datetime parameter. It checks repositories modified\n    within the last 7 days.\n\n    Parameters:\n        datetime (str): ISO formatted datetime string for filtering\n\n    Example:\n        GET /api/json?datetime=2024-03-20T00:00:00Z\n\n    Expects:\n        - 200 status code\n        - Filtered repository data\n        - Metadata containing the applied datetime filter\n    \"\"\"\n    seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()\n    response = requests.get(f\"{BASE_URL}/api/json\", params={\"datetime\": seven_days_ago}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] == seven_days_ago\n</code></pre>"},{"location":"testing/backend/#archived-status-filtering","title":"Archived Status Filtering","text":"<p>Tests filtering repositories by archived status:</p> <p>Test the JSON endpoint with archived status filtering.</p> <p>This test verifies that the endpoint correctly filters repositories based on their archived status. It tests both archived and non-archived filtering options.</p> <p>Parameters:</p> Name Type Description Default <code>archived</code> <code>str</code> <p>\"true\" or \"false\" to filter archived status</p> required Example <p>GET /api/json?archived=false</p> Expects <ul> <li>200 status code for both archived and non-archived queries</li> <li>Filtered repository data based on archived status</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_with_archived():\n    \"\"\"Test the JSON endpoint with archived status filtering.\n\n    This test verifies that the endpoint correctly filters repositories\n    based on their archived status. It tests both archived and non-archived\n    filtering options.\n\n    Parameters:\n        archived (str): \"true\" or \"false\" to filter archived status\n\n    Example:\n        GET /api/json?archived=false\n\n    Expects:\n        - 200 status code for both archived and non-archived queries\n        - Filtered repository data based on archived status\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\", params={\"archived\": \"true\"}, timeout=10)\n    assert response.status_code == 200\n\n    response = requests.get(f\"{BASE_URL}/api/json\", params={\"archived\": \"false\"}, timeout=10)\n    assert response.status_code == 200\n</code></pre>"},{"location":"testing/backend/#combined-filtering","title":"Combined Filtering","text":"<p>Tests applying multiple filters simultaneously:</p> <p>Test the JSON endpoint with multiple filter parameters.</p> <p>This test verifies that the endpoint correctly handles multiple filter parameters simultaneously, including datetime and archived status filters. It ensures all filters are properly applied and reflected in the response.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>ISO formatted datetime string for filtering</p> required <code>archived</code> <code>str</code> <p>\"true\" or \"false\" to filter archived status</p> required Example <p>GET /api/json?datetime=2024-03-20T00:00:00Z&amp;archived=false</p> Expects <ul> <li>200 status code</li> <li>Repository data filtered by all parameters</li> <li>Metadata reflecting the applied datetime filter</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_combined_params():\n    \"\"\"Test the JSON endpoint with multiple filter parameters.\n\n    This test verifies that the endpoint correctly handles multiple filter\n    parameters simultaneously, including datetime and archived status filters.\n    It ensures all filters are properly applied and reflected in the response.\n\n    Parameters:\n        datetime (str): ISO formatted datetime string for filtering\n        archived (str): \"true\" or \"false\" to filter archived status\n\n    Example:\n        GET /api/json?datetime=2024-03-20T00:00:00Z&amp;archived=false\n\n    Expects:\n        - 200 status code\n        - Repository data filtered by all parameters\n        - Metadata reflecting the applied datetime filter\n    \"\"\"\n    seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()\n    params = {\n        \"datetime\": seven_days_ago,\n        \"archived\": \"false\"\n    }\n    response = requests.get(f\"{BASE_URL}/api/json\", params=params, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] == seven_days_ago\n</code></pre>"},{"location":"testing/backend/#repository-project-tests","title":"Repository Project Tests","text":""},{"location":"testing/backend/#error-handling","title":"Error Handling","text":"<p>Tests the endpoint's response when required parameters are missing:</p> <p>Test the repository project JSON endpoint error handling for missing parameters.</p> <p>This test verifies that the endpoint correctly handles the case when no repositories are specified in the request parameters. It should return a 400 Bad Request status code with an appropriate error message.</p> Expects <ul> <li>400 status code</li> <li>JSON response with error message</li> <li>Error message indicating no repositories specified</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_repository_project_json_no_params():\n    \"\"\"Test the repository project JSON endpoint error handling for missing parameters.\n\n    This test verifies that the endpoint correctly handles the case when no\n    repositories are specified in the request parameters. It should return\n    a 400 Bad Request status code with an appropriate error message.\n\n    Expects:\n        - 400 status code\n        - JSON response with error message\n        - Error message indicating no repositories specified\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/repository/project/json\", timeout=10)\n    assert response.status_code == 400\n    data = response.json()\n    assert \"error\" in data\n    assert data[\"error\"] == \"No repositories specified\"\n</code></pre>"},{"location":"testing/backend/#single-repository","title":"Single Repository","text":"<p>Tests retrieving data for a single repository:</p> <p>Test the repository project JSON endpoint with a valid repository parameter.</p> <p>This test verifies the endpoint's basic functionality when requesting data for a single repository. It checks the complete response structure including repository data, statistics, and metadata.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Name of the repository to query (e.g., \"tech-radar\")</p> required Expects <ul> <li>200 status code</li> <li>JSON response with complete repository data</li> <li>Valid statistics for the repository</li> <li>Correct metadata including requested repository names</li> <li>Language statistics if available</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_repository_project_json_with_repos():\n    \"\"\"Test the repository project JSON endpoint with a valid repository parameter.\n\n    This test verifies the endpoint's basic functionality when requesting data\n    for a single repository. It checks the complete response structure including\n    repository data, statistics, and metadata.\n\n    Parameters:\n        repositories (str): Name of the repository to query (e.g., \"tech-radar\")\n\n    Expects:\n        - 200 status code\n        - JSON response with complete repository data\n        - Valid statistics for the repository\n        - Correct metadata including requested repository names\n        - Language statistics if available\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/repository/project/json\", params={\"repositories\": \"tech-radar\"}, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify response structure\n    assert \"repositories\" in data\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n    assert \"metadata\" in data\n\n    # Verify stats structure\n    stats = data[\"stats\"]\n    assert \"total_repos\" in stats\n    assert \"total_private_repos\" in stats\n    assert \"total_public_repos\" in stats\n    assert \"total_internal_repos\" in stats\n\n    # Verify metadata\n    metadata = data[\"metadata\"]\n    assert \"requested_repos\" in metadata\n    assert \"found_repos\" in metadata\n    assert metadata[\"requested_repos\"] == [\"tech-radar\"]\n</code></pre>"},{"location":"testing/backend/#multiple-repositories","title":"Multiple Repositories","text":"<p>Tests retrieving data for multiple repositories:</p> <p>Test the repository project JSON endpoint with multiple repositories.</p> <p>This test verifies that the endpoint correctly handles requests for multiple repositories in a single call. It checks that all requested repositories are processed and included in the response.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>str</code> <p>Comma-separated list of repository names</p> required Example <p>GET /api/repository/project/json?repositories=tech-radar,another-repo</p> Expects <ul> <li>200 status code</li> <li>Data for all requested repositories</li> <li>Metadata containing all requested repository names</li> <li>Aggregated statistics across all repositories</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_repository_project_json_multiple_repos():\n    \"\"\"Test the repository project JSON endpoint with multiple repositories.\n\n    This test verifies that the endpoint correctly handles requests for\n    multiple repositories in a single call. It checks that all requested\n    repositories are processed and included in the response.\n\n    Parameters:\n        repositories (str): Comma-separated list of repository names\n\n    Example:\n        GET /api/repository/project/json?repositories=tech-radar,another-repo\n\n    Expects:\n        - 200 status code\n        - Data for all requested repositories\n        - Metadata containing all requested repository names\n        - Aggregated statistics across all repositories\n    \"\"\"\n    params = {\n        \"repositories\": \"tech-radar,another-repo\"\n    }\n    response = requests.get(f\"{BASE_URL}/api/repository/project/json\", params=params, timeout=10)\n    assert response.status_code == 200\n    data = response.json()\n\n    # Verify the requested repos are in metadata\n    assert len(data[\"metadata\"][\"requested_repos\"]) == 2\n    assert \"tech-radar\" in data[\"metadata\"][\"requested_repos\"]\n    assert \"another-repo\" in data[\"metadata\"][\"requested_repos\"]\n</code></pre>"},{"location":"testing/backend/#tech-radar-update-tests","title":"Tech Radar Update Tests","text":""},{"location":"testing/backend/#valid-structure","title":"Valid Structure","text":"<p>Tests updating the Tech Radar with valid data:</p> <p>Test the tech radar update endpoint with valid complete structure.</p> <p>This test verifies that the endpoint correctly processes a complete tech radar update with valid structure for all components.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Valid title</li> <li>Valid quadrants with required fields</li> <li>Valid rings with required fields</li> <li>Valid entries with required fields</li> </ul> Expects <ul> <li>200 status code</li> <li>Successful update confirmation</li> <li>Correct structure in stored data</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_tech_radar_update_valid_structure():\n    \"\"\"Test the tech radar update endpoint with valid complete structure.\n\n    This test verifies that the endpoint correctly processes a complete\n    tech radar update with valid structure for all components.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Valid title\n        - Valid quadrants with required fields\n        - Valid rings with required fields\n        - Valid entries with required fields\n\n    Expects:\n        - 200 status code\n        - Successful update confirmation\n        - Correct structure in stored data\n    \"\"\"\n    random_number = random.randint(100,1000)\n    test_data = {\n        \"entries\": [\n            {\n                \"id\": \"test-entry-1\",\n                \"title\": \"Test Entry 1\",\n                \"description\": \"Languages\",\n                \"key\": \"test1\",\n                \"url\": \"#\",\n                \"quadrant\": \"1\",\n                \"timeline\": [\n                    {\n                        \"moved\": 0,\n                        \"ringId\": \"ignore\",\n                        \"date\": \"2000-01-01\",\n                        \"description\": f\"For testing purposes [CASE:{random_number}:2]\"\n                    }\n                ],\n                \"links\": []\n            }\n        ]\n    }\n\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json=test_data,\n        timeout=10\n    )\n    assert response.status_code == 200\n    assert response.json()[\"message\"] == \"Tech radar updated successfully\"\n\n    # Verify the update\n    get_response = requests.get(f\"{BASE_URL}/api/tech-radar/json\", timeout=10)\n    assert get_response.status_code == 200\n    updated_data = get_response.json()\n\n    # Verify entry structure\n    entries = updated_data[\"entries\"]\n    test_entry = next((entry for entry in entries if entry[\"id\"] == \"test-entry-1\"), None)\n    assert test_entry is not None, \"No entry with id 'test-entry-1' found\"\n    assert str(random_number) in test_entry[\"timeline\"][0][\"description\"], \"Entry with id 'test-entry-1' does not have the expected description\"\n</code></pre>"},{"location":"testing/backend/#invalid-structure","title":"Invalid Structure","text":"<p>Tests the endpoint's handling of invalid data structures:</p> <p>Test the tech radar update endpoint with invalid structure.</p> <p>This test verifies that the endpoint correctly validates the complete structure of the tech radar data, including title, quadrants, rings, and entries.</p> Endpoint <p>POST /review/api/tech-radar/update</p> Test Data <ul> <li>Missing title</li> <li>Invalid quadrants structure</li> <li>Invalid rings structure</li> <li>Invalid entries structure</li> </ul> Expects <ul> <li>400 status code for each invalid case</li> <li>Appropriate error messages</li> <li>No changes to existing data</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_tech_radar_update_invalid_structure():\n    \"\"\"Test the tech radar update endpoint with invalid structure.\n\n    This test verifies that the endpoint correctly validates the complete\n    structure of the tech radar data, including title, quadrants, rings,\n    and entries.\n\n    Endpoint:\n        POST /review/api/tech-radar/update\n\n    Test Data:\n        - Missing title\n        - Invalid quadrants structure\n        - Invalid rings structure\n        - Invalid entries structure\n\n    Expects:\n        - 400 status code for each invalid case\n        - Appropriate error messages\n        - No changes to existing data\n    \"\"\"\n    # Test missing title\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"quadrants\": [],\n            \"rings\": [],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n\n    # Test invalid quadrants\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"title\": \"Test Radar\",\n            \"quadrants\": [{\"invalid\": \"structure\"}],\n            \"rings\": [],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n\n    # Test invalid rings\n    response = requests.post(\n        f\"{BASE_URL}/review/api/tech-radar/update\",\n        json={\n            \"title\": \"Test Radar\",\n            \"quadrants\": [{\"id\": \"1\", \"name\": \"Test\"}],\n            \"rings\": [{\"invalid\": \"structure\"}],\n            \"entries\": []\n        },\n        timeout=10\n    )\n    assert response.status_code == 400\n    assert response.json()[\"error\"] == \"Invalid or empty entries data\"\n</code></pre>"},{"location":"testing/backend/#error-handling-tests","title":"Error Handling Tests","text":""},{"location":"testing/backend/#invalid-endpoints","title":"Invalid Endpoints","text":"<p>Tests the server's response to non-existent endpoints:</p> <p>Test error handling for invalid endpoints.</p> <p>This test verifies that the server properly handles requests to non-existent endpoints by returning appropriate error status codes.</p> Example <p>GET /api/nonexistent</p> Expects <ul> <li>Either 404 (Not Found) or 500 (Internal Server Error) status code</li> <li>Proper error handling for invalid routes</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_invalid_endpoint():\n    \"\"\"Test error handling for invalid endpoints.\n\n    This test verifies that the server properly handles requests to\n    non-existent endpoints by returning appropriate error status codes.\n\n    Example:\n        GET /api/nonexistent\n\n    Expects:\n        - Either 404 (Not Found) or 500 (Internal Server Error) status code\n        - Proper error handling for invalid routes\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/nonexistent\", timeout=10)\n    assert response.status_code in [404, 500]  # Either is acceptable\n</code></pre>"},{"location":"testing/backend/#invalid-parameters","title":"Invalid Parameters","text":"<p>Tests the server's handling of invalid parameter values:</p> <p>Test the JSON endpoint's handling of invalid date parameters.</p> <p>This test verifies that the endpoint gracefully handles invalid datetime parameters without failing. It should ignore the invalid date and return unfiltered results.</p> <p>Parameters:</p> Name Type Description Default <code>datetime</code> <code>str</code> <p>An invalid datetime string</p> required Example <p>GET /api/json?datetime=invalid-date</p> Expects <ul> <li>200 status code (graceful handling)</li> <li>Null filter_date in metadata</li> <li>Valid response with unfiltered stats</li> <li>Complete language statistics</li> </ul> Source code in <code>testing/backend/test_main.py</code> <pre><code>def test_json_endpoint_invalid_date():\n    \"\"\"Test the JSON endpoint's handling of invalid date parameters.\n\n    This test verifies that the endpoint gracefully handles invalid datetime\n    parameters without failing. It should ignore the invalid date and return\n    unfiltered results.\n\n    Parameters:\n        datetime (str): An invalid datetime string\n\n    Example:\n        GET /api/json?datetime=invalid-date\n\n    Expects:\n        - 200 status code (graceful handling)\n        - Null filter_date in metadata\n        - Valid response with unfiltered stats\n        - Complete language statistics\n    \"\"\"\n    response = requests.get(f\"{BASE_URL}/api/json\", params={\"datetime\": \"invalid-date\"}, timeout=10)\n    assert response.status_code == 200  # Backend handles invalid dates gracefully\n    data = response.json()\n    assert data[\"metadata\"][\"filter_date\"] is None\n    assert \"stats\" in data\n    assert \"language_statistics\" in data\n</code></pre>"},{"location":"testing/backend/#test-execution-flow","title":"Test Execution Flow","text":"<p>The backend tests follow this general execution flow:</p> <ol> <li>Setup: Configure the test environment and parameters</li> <li>Request: Make an HTTP request to the target endpoint</li> <li>Validation: Assert that the response status code is as expected</li> <li>Data Verification: Assert that the response data structure is correct</li> <li>Content Verification: Assert that the response data contains the expected values</li> </ol>"},{"location":"testing/backend/#integration-with-frontend-utilities","title":"Integration with Frontend Utilities","text":"<p>These backend tests validate the same endpoints that are used by the frontend utilities:</p> <ol> <li>Project Data Utility: The <code>test_csv_endpoint()</code> test validates the endpoint used by <code>fetchCSVFromS3()</code></li> <li>Repository Data Utility: The repository project tests validate the endpoint used by <code>fetchRepositoryData()</code></li> <li>Tech Radar Data Utility: The <code>test_tech_radar_json_endpoint()</code> test validates the endpoint used by <code>fetchTechRadarJSONFromS3()</code> </li> </ol>"},{"location":"utilities/projectData/","title":"Project Data Utility","text":"<p>The Project Data utility provides functions for fetching project data from the AWS S3 Bucket. It serves as a data provider for the DataContext, enabling the application to access and display project information throughout the app.</p>"},{"location":"utilities/projectData/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary function:</p>"},{"location":"utilities/projectData/#fetchcsvfroms3","title":"fetchCSVFromS3","text":"<pre><code>export const fetchCSVFromS3 = async () =&gt; {\n  // Implementation details\n}\n</code></pre> <p>This function:</p> <ol> <li>Attempts to fetch project data from the API endpoint</li> <li>Handles environment-specific URLs (development vs production)</li> <li>Implements error handling with fallback to local CSV data</li> <li>Returns structured project data for consumption by the DataContext</li> </ol>"},{"location":"utilities/projectData/#implementation-details","title":"Implementation Details","text":"<p>The function follows a robust error-handling pattern:</p> <ol> <li> <p>Primary Request: Attempts to fetch data from the API endpoint</p> <ul> <li>Uses <code>localhost:5001/api/csv</code> in development</li> <li>Uses <code>/api/csv</code> in production</li> </ul> </li> <li> <p>Fallback Mechanism: If the primary request fails, attempts to load local CSV data</p> <ul> <li>Parses the CSV text into a structured object</li> <li>Displays an error toast notification to inform the user</li> </ul> </li> <li> <p>Final Error Handling: If both primary and fallback requests fail</p> <ul> <li>Returns <code>null</code> to indicate failure</li> <li>Displays an error toast notification</li> </ul> </li> </ol>"},{"location":"utilities/projectData/#integration-with-datacontext","title":"Integration with DataContext","text":"<p>The DataContext uses this utility to:</p> <ol> <li>Fetch project data on initial application load</li> <li>Refresh project data when requested by the user</li> <li>Cache the returned data to minimize redundant API calls</li> </ol> <p>Example usage within DataContext:</p> <pre><code>const getCsvData = useCallback(async (forceRefresh = false) =&gt; {\n  // Check cache first unless forceRefresh is true\n  if (csvData &amp;&amp; !forceRefresh) {\n    return csvData;\n  }\n\n  // Check for pending request\n  if (pendingRequests.csv) {\n    return pendingRequests.csv;\n  }\n\n  // Create new request\n  const request = fetchCSVFromS3();\n  pendingRequests.csv = request;\n\n  try {\n    const data = await request;\n    setCsvData(data);\n    return data;\n  } finally {\n    pendingRequests.csv = null;\n  }\n}, [csvData, pendingRequests]);\n</code></pre>"},{"location":"utilities/projectData/#error-handling","title":"Error Handling","text":"<p>The utility implements comprehensive error handling:</p> <ul> <li>Catches and logs network errors</li> <li>Provides user feedback via toast notifications</li> <li>Attempts to load fallback data when primary sources fail</li> <li>Returns <code>null</code> when all data sources are unavailable</li> </ul>"},{"location":"utilities/repositoryData/","title":"Repository Data Utility","text":"<p>The Repository Data utility provides functions for fetching detailed repository information from the AWS S3 Bucket. It serves as a data provider for the DataContext, enabling the application to access and display repository-specific information with filtering capabilities.</p>"},{"location":"utilities/repositoryData/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary function:</p>"},{"location":"utilities/repositoryData/#fetchrepositorydata","title":"fetchRepositoryData","text":"<pre><code>export const fetchRepositoryData = async (\n  repositories,\n  date = null,\n  archived = null\n) =&gt; {\n  // Implementation details\n}\n</code></pre> <p>This function:</p> <ol> <li>Fetches detailed data for specific repositories</li> <li>Supports filtering by date and archived status</li> <li>Handles environment-specific URLs (development vs production)</li> <li>Implements error handling with user feedback</li> </ol>"},{"location":"utilities/repositoryData/#parameters","title":"Parameters","text":"<p>The function accepts the following parameters:</p> Parameter Type Default Description <code>repositories</code> string[] Required Array of repository names to fetch data for <code>date</code> string <code>null</code> ISO date string to filter repositories by last commit date <code>archived</code> string <code>null</code> 'true'/'false' to filter archived repositories"},{"location":"utilities/repositoryData/#implementation-details","title":"Implementation Details","text":"<p>The function follows a structured request pattern:</p> <ol> <li> <p>Parameter Validation: Checks if repositories array is valid</p> <ul> <li>Returns <code>null</code> if repositories array is empty or undefined</li> </ul> </li> <li> <p>URL Parameter Construction: Builds query parameters</p> <ul> <li>Converts repository array to comma-separated string</li> <li>Adds optional date and archived parameters when provided</li> </ul> </li> <li> <p>Environment-Specific URL: Determines the correct API endpoint</p> <ul> <li>Uses <code>localhost:5001/api/repository/project/json</code> in development</li> <li>Uses <code>/api/repository/project/json</code> in production</li> </ul> </li> <li> <p>Request Execution: Fetches data with constructed URL and parameters</p> <ul> <li>Validates response status</li> <li>Parses JSON response</li> </ul> </li> <li> <p>Error Handling: Manages request failures</p> <ul> <li>Displays error toast notification</li> <li>Returns <code>null</code> to indicate failure</li> </ul> </li> </ol>"},{"location":"utilities/repositoryData/#integration-with-datacontext","title":"Integration with DataContext","text":"<p>The DataContext uses this utility to:</p> <ol> <li>Fetch repository data when needed for specific views</li> <li>Apply filtering based on user selections (date ranges, archived status)</li> <li>Cache the returned data to minimize redundant API calls</li> </ol> <p>Example usage within DataContext:</p> <pre><code>const getRepositoryData = useCallback(\n  async (repositories, date = null, archived = null, forceRefresh = false) =&gt; {\n    // Create cache key based on parameters\n    const cacheKey = `${repositories.join(\",\")}:${date || \"\"}:${\n      archived || \"\"\n    }`;\n\n    // Check cache first unless forceRefresh is true\n    if (repositoryData.has(cacheKey) &amp;&amp; !forceRefresh) {\n      return repositoryData.get(cacheKey);\n    }\n\n    // Check for pending request\n    if (pendingRequests.repository?.[cacheKey]) {\n      return pendingRequests.repository[cacheKey];\n    }\n\n    // Initialize repository requests object if needed\n    if (!pendingRequests.repository) {\n      pendingRequests.repository = {};\n    }\n\n    // Create new request\n    const request = fetchRepositoryData(repositories, date, archived);\n    pendingRequests.repository[cacheKey] = request;\n\n    try {\n      const data = await request;\n      // Update cache with new data\n      setRepositoryData(new Map(repositoryData.set(cacheKey, data)));\n      return data;\n    } finally {\n      // Clean up pending request\n      pendingRequests.repository[cacheKey] = null;\n    }\n  },\n  [repositoryData, pendingRequests]\n);\n</code></pre>"},{"location":"utilities/repositoryData/#error-handling","title":"Error Handling","text":"<p>The utility implements error handling:</p> <ul> <li>Catches and logs network errors</li> <li>Provides user feedback via toast notifications</li> <li>Returns <code>null</code> when data is unavailable</li> </ul>"},{"location":"utilities/techRadarData/","title":"Tech Radar Data Utility","text":"<p>The Tech Radar Data utility provides functions for fetching Tech Radar information from the AWS S3 Bucket. It serves as a data provider for the DataContext, enabling the application to access and display technology categorisation and status information throughout the app.</p>"},{"location":"utilities/techRadarData/#core-functionality","title":"Core Functionality","text":"<p>The utility exports a primary function:</p>"},{"location":"utilities/techRadarData/#fetchtechradarjsonfroms3","title":"fetchTechRadarJSONFromS3","text":"<pre><code>export const fetchTechRadarJSONFromS3 = async () =&gt; {\n  // Implementation details\n}\n</code></pre> <p>This function:</p> <ol> <li>Fetches Tech Radar data from the API endpoint</li> <li>Handles environment-specific URLs (development vs production)</li> <li>Implements error handling with user feedback</li> <li>Returns structured Tech Radar data for consumption by the DataContext</li> </ol>"},{"location":"utilities/techRadarData/#implementation-details","title":"Implementation Details","text":"<p>The function follows a straightforward request pattern:</p> <ol> <li> <p>Environment-Specific URL: Determines the correct API endpoint</p> <ul> <li>Uses <code>localhost:5001/api/tech-radar/json</code> in development</li> <li>Uses <code>/api/tech-radar/json</code> in production</li> </ul> </li> <li> <p>Request Execution: Fetches data from the determined endpoint</p> <ul> <li>Validates response status</li> <li>Returns <code>null</code> for unsuccessful responses</li> </ul> </li> <li> <p>Response Parsing: Converts the JSON response to a JavaScript object</p> </li> <li> <p>Error Handling: Manages request failures</p> <ul> <li>Catches and logs network errors</li> <li>Displays error toast notification</li> <li>Returns <code>null</code> to indicate failure</li> </ul> </li> </ol>"},{"location":"utilities/techRadarData/#integration-with-datacontext","title":"Integration with DataContext","text":"<p>The DataContext uses this utility to:</p> <ol> <li>Fetch Tech Radar data on initial application load</li> <li>Refresh Tech Radar data when requested by the user</li> <li>Cache the returned data to minimize redundant API calls</li> </ol> <p>Example usage within DataContext:</p> <pre><code>const getTechRadarData = useCallback(async (forceRefresh = false) =&gt; {\n  // Check cache first unless forceRefresh is true\n  if (techRadarData &amp;&amp; !forceRefresh) {\n    return techRadarData;\n  }\n\n  // Check for pending request\n  if (pendingRequests.techRadar) {\n    return pendingRequests.techRadar;\n  }\n\n  // Create new request\n  const request = fetchTechRadarJSONFromS3();\n  pendingRequests.techRadar = request;\n\n  try {\n    const data = await request;\n    setTechRadarData(data);\n    return data;\n  } finally {\n    pendingRequests.techRadar = null;\n  }\n}, [techRadarData, pendingRequests]);\n</code></pre>"},{"location":"utilities/techRadarData/#error-handling","title":"Error Handling","text":"<p>The utility implements error handling:</p> <ul> <li>Catches and logs network errors</li> <li>Provides user feedback via toast notifications</li> <li>Returns <code>null</code> when data is unavailable</li> </ul>"},{"location":"utilities/techRadarData/#usage-in-components","title":"Usage in Components","text":"<p>The Tech Radar data is used throughout the application to:</p> <ol> <li>Build the radar visualisation</li> <li>Display technology status in the Statistics view</li> <li>Highlight technologies in project listings</li> <li>Provide filtering options based on technology status</li> <li>Show historical movement of technologies between rings</li> </ol>"}]}